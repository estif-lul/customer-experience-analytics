import oracledb
from dotenv import load_dotenv
import csv
import os

# Load environment variables from .env file
load_dotenv(override=True)
print(os.getenv("ORACLE_DB_USER"))

class OracleDBHandler:
    """
    OracleDBHandler is a class for managing Oracle database operations related to customer review analytics.
    Attributes:
        dsn (str): The Data Source Name for connecting to the Oracle database.
        connection (oracledb.Connection): The Oracle database connection object.
    Methods:
        __init__():
            Initializes the OracleDBHandler instance by setting up the database connection using environment variables.
        create_bank_table(bank_name):
            Creates a review table for the specified bank if it does not already exist.
            The table includes columns for review details, sentiment analysis, and themes.
            Args:
                bank_name (str): The name of the bank to use as a prefix for the table name.
        insert_data(bank_name):
            Inserts review data from a CSV file into the corresponding bank's review table.
            The CSV file should be located at 'data/{bank_name}_reviews_with_sentiment_and_themes.csv' and match the table structure.
            Args:
                bank_name (str): The name of the bank whose data is to be inserted.
    """

    def __init__ (self):
        # Database connection details
        self.dsn = oracledb.makedsn(os.getenv("ORACLE_DB_HOST"), 
                            os.getenv("ORACLE_DB_PORT"),
                            sid=os.getenv("ORACLE_DB_SID"))
        # Establish a connection to the Oracle database
        self.connection = oracledb.connect(user=os.getenv("ORACLE_DB_USER"), 
                                    password=os.getenv("ORACLE_DB_PASSWORD"),
                                    dsn=self.dsn,
                                    mode=oracledb.AUTH_MODE_SYSDBA)


    def create_bank_table(self, bank_name):
        """        Creates a review table for the specified bank if it does not already exist.
        The table includes columns for review details, sentiment analysis, and themes.
        Parameters:
            bank_name (str): The name of the bank to use as a prefix for the table name.
            
        Raises:
            oracledb.DatabaseError: If there is an error executing the SQL command.
            Exception: For any other unexpected errors.
        """
        try:
            # Create a cursor object
            cursor = self.connection.cursor()

            # SQL command to create a table
            create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {bank_name}_review (
                review_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                review_text VARCHAR2(700),
                rating NUMBER(2, 0),
                review_date DATE,
                bank_name VARCHAR2(100),
                source VARCHAR2(50),
                user_name VARCHAR2(50),
                language VARCHAR2(10),
                processed_text VARCHAR2(700),
                textblob_sentiment VARCHAR2(20),
                vader_sentiment VARCHAR2(20),
                distilbert_sentiment VARCHAR2(20),
                themes VARCHAR2(250),
                PRIMARY KEY (review_id)
            )
            """

            cursor.execute(create_table_query)
            print(f"Table '{bank_name}_review' created successfully!")

        except oracledb.DatabaseError as e:
            print("Error occurred:", e)
        except Exception as e:
            print("An unexpected error occurred:", e)
        finally:
            # Close the cursor
            cursor.close()

    def insert_data(self, bank_name):
        """Inserts review data from a CSV file into the corresponding bank's review table.
        The CSV file should be located at 'data/{bank_name}_reviews_with_sentiment_and_themes.csv' and match the table structure.
        Parameters:
            bank_name (str): The name of the bank whose data is to be inserted. 
            
        Raises:
            FileNotFoundError: If the specified CSV file does not exist.
            oracledb.DatabaseError: If there is an error executing the SQL command.
            Exception: For any other unexpected errors."""
        try:
            cursor = self.connection.cursor()
            with open(f"data/{bank_name}_reviews_with_sentiment_and_themes.csv",
                       'r', encoding='utf-8') as file:
                reader = csv.reader(file)
                next(reader)
                for row in reader:
                    # Assuming the CSV columns match the table structure
                    cursor.execute(f"""
                    INSERT INTO {bank_name}_review (
                        review_text, rating, review_date, bank_name, source,
                        user_name, language, processed_text, textblob_sentiment,
                        vader_sentiment, distilbert_sentiment, themes
                    ) VALUES (
                        :1, TO_NUMBER(:2), TO_DATE(:3, 'YYYY-MM-DD'), :4, :5,
                        :6, :7, :8, :9, :10, :11, :12
                    )""", row)
                self.connection.commit()
                print(f"Data inserted into '{bank_name}_review' table successfully!")
        except FileNotFoundError:
            print(f"File 'data/{bank_name}_reviews_with_sentiment_and_themes.csv' not found.")

        except oracledb.DatabaseError as e:
                print("Error occurred:", e)
        except Exception as e:
            print("An unexpected error occurred:", e)
        finally:
            # Close the cursor
            cursor.close()

if __name__ == "__main__":
    bank_names = ["cbe", "boa", "dashen"]
    # Initialize the OracleDBHandler
    # This will create the connection to the Oracle database
    print("Connecting to Oracle Database...")
    db_handler = OracleDBHandler()
    for bank in bank_names:
        db_handler.create_bank_table(bank)
        db_handler.insert_data(bank)
    db_handler.connection.close()